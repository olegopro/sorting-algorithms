function shellSort(arr) {
	let n = arr.length
	
	// Интервал уменьшается с каждым проходом. Предполагается, что уменьшение интервала не влияет на сложность алгоритма, так что O(1) для этой операции
	for (let interval = Math.floor(n / 2); interval > 0; interval = Math.floor(interval / 2)) { // Внешний цикл: O(log n)
		
		// Проходим через массив с определенным интервалом - внутренний цикл будет выполняться n/interval раз
		for (let i = interval; i < n; i += 1) { // Внутренний цикл: O(n) (в среднем)
			let temp = arr[i] // Присваивание выполняется за константное время O(1)
			let j
			
			// Сдвигаем элементы больше, чем temp, на интервал назад. Этот цикл в худшем случае может выполниться 'i' раз
			for (j = i; j >= interval && arr[j - interval] > temp; j -= interval) { // В худшем случае O(n/interval)
				arr[j] = arr[j - interval] // Операция присваивания выполняется за константное время O(1)
			}

			// Вставляем temp на его конечное место
			arr[j] = temp // Присваивание выполняется за константное время O(1)
		}
	}

	return arr
	// Общая средняя сложность алгоритма: O(n(log n)^2), хотя это зависит от выбора интервалов
	// Максимальная сложность: O(n^2) при неудачном выборе интервалов
}

// Пример использования:
let array = [35, 33, 42, 10, 14, 19, 27, 44]
console.log(shellSort(array))
